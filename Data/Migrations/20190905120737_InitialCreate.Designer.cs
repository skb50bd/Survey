// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190905120737_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content");

                    b.Property<string>("FileName");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.ResponseSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("D");

                    b.Property<string>("G4A");

                    b.Property<string>("G4B");

                    b.Property<string>("I1");

                    b.Property<string>("I2");

                    b.Property<string>("I3");

                    b.Property<string>("I4");

                    b.Property<int?>("SponsorResponseId");

                    b.Property<int?>("ThirdPartyResponseId");

                    b.HasKey("Id");

                    b.HasIndex("SponsorResponseId");

                    b.HasIndex("ThirdPartyResponseId");

                    b.ToTable("ResponseSummaries");
                });

            modelBuilder.Entity("Domain.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("Email");

                    b.Property<bool>("HasResponded");

                    b.Property<string>("Name");

                    b.Property<int?>("ResponseId");

                    b.Property<int?>("SummaryId");

                    b.Property<int>("ThirdPartyId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("SummaryId");

                    b.HasIndex("ThirdPartyId");

                    b.HasIndex("UniqueIdentifier");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Domain.SponsorResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("A1");

                    b.Property<string>("B1");

                    b.Property<string>("B2");

                    b.Property<string>("B3");

                    b.Property<string>("C1");

                    b.Property<string>("C2");

                    b.Property<string>("C3");

                    b.Property<string>("C4");

                    b.Property<string>("C5");

                    b.Property<string>("C6");

                    b.Property<string>("C7");

                    b.Property<string>("D1");

                    b.Property<string>("D2");

                    b.Property<string>("D3");

                    b.Property<string>("E1");

                    b.Property<string>("E2");

                    b.Property<string>("E3");

                    b.Property<string>("F1");

                    b.Property<string>("F2");

                    b.Property<string>("F3");

                    b.Property<string>("G1");

                    b.Property<string>("G2");

                    b.Property<string>("G3");

                    b.HasKey("Id");

                    b.ToTable("SponsorResponses");
                });

            modelBuilder.Entity("Domain.ThirdParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("HasResponded");

                    b.Property<string>("Name");

                    b.Property<int?>("ResponseId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UniqueIdentifier");

                    b.ToTable("ThirdParties");
                });

            modelBuilder.Entity("Domain.ThirdPartyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("A1");

                    b.Property<string>("A2A");

                    b.Property<string>("A2B");

                    b.Property<string>("A2C1");

                    b.Property<string>("A2C2");

                    b.Property<string>("B1");

                    b.Property<string>("B2A");

                    b.Property<string>("B2B");

                    b.Property<string>("B2C");

                    b.Property<string>("B2D1");

                    b.Property<string>("B2D2");

                    b.Property<string>("B2E");

                    b.Property<string>("B2F");

                    b.Property<string>("B2Oa");

                    b.Property<string>("B2Ob");

                    b.Property<string>("B2Oc");

                    b.Property<string>("B2Od");

                    b.Property<string>("B3A");

                    b.Property<string>("B3B1");

                    b.Property<string>("B3B2");

                    b.Property<string>("B3C");

                    b.Property<string>("B3D1A");

                    b.Property<string>("B3D1B");

                    b.Property<string>("B3D2");

                    b.Property<string>("B4A");

                    b.Property<string>("B4B");

                    b.Property<string>("B4C");

                    b.Property<string>("B5");

                    b.Property<string>("C1A");

                    b.Property<string>("C1B");

                    b.Property<string>("C1C");

                    b.Property<string>("C1D");

                    b.Property<string>("C1E");

                    b.Property<string>("C1F1");

                    b.Property<string>("C1F2");

                    b.Property<string>("C2A");

                    b.Property<string>("C2B");

                    b.Property<string>("C2C");

                    b.Property<string>("C2D");

                    b.Property<string>("C2E");

                    b.Property<string>("C2F1");

                    b.Property<string>("C2F2");

                    b.Property<string>("C3A");

                    b.Property<string>("C3B");

                    b.Property<string>("C3C");

                    b.Property<string>("C3D");

                    b.Property<string>("C3E");

                    b.Property<string>("C3F1");

                    b.Property<string>("C3F2");

                    b.Property<string>("D1");

                    b.Property<string>("D2");

                    b.Property<string>("D3");

                    b.Property<string>("D4");

                    b.Property<string>("D4A");

                    b.Property<string>("D4B");

                    b.Property<string>("D4C");

                    b.Property<string>("D4D");

                    b.Property<string>("D5");

                    b.Property<string>("D6");

                    b.Property<string>("D6A");

                    b.Property<int?>("DocumentAId");

                    b.Property<int?>("DocumentBId");

                    b.Property<int?>("DocumentCId");

                    b.Property<int?>("DocumentDId");

                    b.Property<int?>("DocumentEId");

                    b.Property<string>("E1A");

                    b.Property<string>("E1B");

                    b.Property<string>("E2A");

                    b.Property<string>("E2B");

                    b.Property<string>("E3");

                    b.Property<string>("F1");

                    b.Property<string>("F10");

                    b.Property<string>("F11");

                    b.Property<string>("F12");

                    b.Property<string>("F13A");

                    b.Property<string>("F13B");

                    b.Property<string>("F13C");

                    b.Property<string>("F13D");

                    b.Property<string>("F2");

                    b.Property<string>("F3");

                    b.Property<string>("F4");

                    b.Property<string>("F5");

                    b.Property<string>("F6");

                    b.Property<string>("F7");

                    b.Property<string>("F8");

                    b.Property<string>("F9");

                    b.Property<string>("G1");

                    b.Property<string>("G2A");

                    b.Property<string>("G2B");

                    b.Property<string>("G2C");

                    b.Property<string>("G2D");

                    b.Property<string>("H1");

                    b.Property<string>("H2");

                    b.Property<string>("H3");

                    b.Property<string>("H4");

                    b.Property<string>("H5");

                    b.HasKey("Id");

                    b.HasIndex("DocumentAId");

                    b.HasIndex("DocumentBId");

                    b.HasIndex("DocumentCId");

                    b.HasIndex("DocumentDId");

                    b.HasIndex("DocumentEId");

                    b.ToTable("ThirdPartyResponses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.ResponseSummary", b =>
                {
                    b.HasOne("Domain.SponsorResponse", "SponsorResponse")
                        .WithMany()
                        .HasForeignKey("SponsorResponseId");

                    b.HasOne("Domain.ThirdPartyResponse", "ThirdPartyResponse")
                        .WithMany()
                        .HasForeignKey("ThirdPartyResponseId");
                });

            modelBuilder.Entity("Domain.Sponsor", b =>
                {
                    b.HasOne("Domain.SponsorResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.HasOne("Domain.ResponseSummary", "Summary")
                        .WithMany()
                        .HasForeignKey("SummaryId");

                    b.HasOne("Domain.ThirdParty", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.ThirdParty", b =>
                {
                    b.HasOne("Domain.ThirdPartyResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");
                });

            modelBuilder.Entity("Domain.ThirdPartyResponse", b =>
                {
                    b.HasOne("Domain.File", "DocumentA")
                        .WithMany()
                        .HasForeignKey("DocumentAId");

                    b.HasOne("Domain.File", "DocumentB")
                        .WithMany()
                        .HasForeignKey("DocumentBId");

                    b.HasOne("Domain.File", "DocumentC")
                        .WithMany()
                        .HasForeignKey("DocumentCId");

                    b.HasOne("Domain.File", "DocumentD")
                        .WithMany()
                        .HasForeignKey("DocumentDId");

                    b.HasOne("Domain.File", "DocumentE")
                        .WithMany()
                        .HasForeignKey("DocumentEId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
